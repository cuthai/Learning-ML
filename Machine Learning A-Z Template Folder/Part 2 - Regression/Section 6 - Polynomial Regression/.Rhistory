install.packages(c("devtools"), dependencies=TRUE, repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
devtools::install_github(repo = "FantasyFootballAnalytics/ffanalytics", build_vignettes = TRUE)
library("ffanalytics")
my_scrape <- scrape_data(src = c("Yahoo"),
pos = c("QB", "RB", "WR", "TE", "DST"),
season = 2018, week = 0)
my_scrape
View(player_table)
View(my_scrape)
View(my_scrape)
View(player_table)
View(player_table)
install.packages("splitstackshape")
install.packages("reshape2")
install.packages("tidyverse")
install.packages("devtools")
install.packages("plotly")
install.packages("crosstalk")
install.packages("DT")
install.packages("fivethirtyeight")
install.packages("fivethirtyeight")
require("fivethirtyeight")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
# Assign months to precipitation as names
names(precipitation) <- months
# Display precipitation
print(precipitation)
# Display names of precipitation
print(names(precipitation))
mars_precipitation <- precipitation["Mar"]
print(mars_precipitation)
# Display summary data of precipitation
summary(precipitation)
precipitation_summary <- summary(precipitation)
# Access features of a summary
precipitation_summary["Min."]
precipitation_summary["Mean"]
precipitation %>% summary()
precipitation_summary[["Max."]]
# Display the standard deviation
sd(precipitation)
# Round SD to two digits
stdev <- sd(precipitation)
round(stdev, 2)
precipitation %>% sd()
3.141592653 %>% round(2)
# Determine the length of a vector
length(precipitation)
# Display the sum of a vector
yearly_precipitation <- sum(precipitation)
yearly_precipitation
precipitation %>% length()
yearly_precipitation2 <- precipitation %>% sum()
print(yearly_precipitation2)
setwd("C:/Users/chris_000/Desktop/Machine-Learning-Materials/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression")
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Fitting Linear Regression to the dataset
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualising the Linear Regression results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$Level4 = dataset$Level^4
View(dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Polynomial Regression results
# install.packages('ggplot2')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
View(poly_reg)
# Predicting a new result with Linear Regression
y_pred = predict(lin_reg, data.frame(Level=6.5))
# Predicting a new result with Polynomial Regression
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.5^4))
poly_reg = lm(formula = Salary ~ .,
data = dataset)
# Visualising the Polynomial Regression results
# install.packages('ggplot2')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Predicting a new result with Polynomial Regression
y_pred = predict(poly_reg, data.frame(Level=6.5,
Level2=6.5^2,
Level3=6.5^3,
Level4=6.5^4))
